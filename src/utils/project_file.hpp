/**
 * @brief Read the project files generated by fsa. 
 */

#pragma once

#include <vector>
#include <string>
#include <unordered_map>

namespace fsa {
    
class PrjContigTiles {
public:
    PrjContigTiles(class StringPool &sp) : string_pool_(sp) {}

    void Load(const std::string &fname);
    const std::vector<int>& GetTiles(int& ctg) {
        auto iter = tiles_.find(ctg);
        return iter != tiles_.end() ? iter->second : empty_;
    }

    const std::unordered_map<int, std::vector<int>> & GetTiles() const { return tiles_; }
protected:
    std::unordered_map<int, std::vector<int>> tiles_;
    std::vector<int> empty_;
    class StringPool &string_pool_;
};

class PrjVariants {
public:
    PrjVariants(class StringPool &sp) : string_pool_(sp) {}
    void Load(const std::string &fname);
    const std::unordered_map<size_t, std::array<uint8_t,2>>& Get(int id) const {
        auto iter = variants_.find(id);
        return iter != variants_.end() ? iter->second : empty_;
    }
protected:
    class StringPool &string_pool_;
    std::unordered_map<int, std::unordered_map<size_t, std::array<uint8_t,2>>> variants_;
    std::unordered_map<size_t, std::array<uint8_t,2>> empty_;
};

}